@echo off
rem must call "setlocal enabledelayedexpansion" in main function

:main
rem this is a utility function file, don't run directly
if "%~1" == "" goto :eof
call :chkdelayexp
if !delayed! equ 0 goto :eof
call %1 %2 %3 %4 %5 %6 %7 %8 %9
goto :eof

:chkdelayexp
set exc=!
if "!!" == "!exc!!exc!" (
  set delayed=1
) else (
  set delayed=0
)
goto :eof

rem /////INIReader batch ver/////

rem inireader_init: %1: reader name
:inireader_init
call :arrinit "inireader_%~1_section"
call :arrinit "inireader_%~1_rm_section"
call :inireader_setinstance "%~1"
goto :eof

rem inireader_getinstance: %1: var to save reader name
:inireader_getinstance
call :getvalue "inireader_current_instance" "%~1"
goto :eof

rem inireader_setinstance: %1: reader name
:inireader_setinstance
set inireader_current_instance=%~1
goto :eof

rem inireader_parse: %1: file path
:inireader_parse
if not exist "%~1" (
  echo "Target not exist!"
  goto :eof
)
if "!inireader_current_instance!" == "" (
  echo Current instance not set!
  goto :eof
)
call :arrinit "inireader_!inireader_current_instance!_section"
set curSection=
for /f "usebackq" %%i in ("%~1") do (
  set strLine=%%i
  call :inireader_readline
)
goto :eof

rem inireader_readline: no argument
:inireader_readline
set retVal=0
set chrb=!strLine:~0,1!
set chr12=!strLine:~0,2!
set chre=!strLine:~-1!
if "!strLine!" == "" goto :eof
if "!chrb!" == "#" goto :eof
if "!chrb!" == ";" goto :eof
if "!chr12!" == "//" goto :eof
if "!chrb!" == "[" (
  if "!chre!" == "]" (
    rem Is a section
    set curSection=!strLine:~1,-1!
    set strLine=!curSection!
    call :arrappend "inireader_!inireader_current_instance!_section" "!curSection!"
    call :arrinit "inireader_!inireader_current_instance!_section_!curSection!_key"
    set retVal=1
    goto :eof
  )
)
call :instr "=" "!strLine!"
if !retval! equ 0 (
  rem Is a key-value
  call :split2 "strLine" "="
  set inireader_!inireader_current_instance!_section_!curSection!_key_!first!=!second!
  call :arrappend "inireader_!inireader_current_instance!_section_!curSection!_key" "!first!"
  goto :eof
)
goto :eof

rem inireader_get_section_by_index: %1: section index %2: var name(optional)
:inireader_get_section_by_index
if "%~2" == "" (
set outvar=retVal
) else (
set outvar=%~2
)
call misc.bat :getvalue "inireader_!inireader_current_instance!_section%~1" "!outvar!"
goto :eof

rem inireader_get: %1: section %2: key %3: var name(optional)
:inireader_get
if "%~3" == "" (
set outvar=retVal
) else (
set outvar=%~3
)
call :getvalue "inireader_!inireader_current_instance!_section_%~1_key_%~2" "!outvar!"
goto :eof

rem inireader_set: %1: section %2: key %3: value
:inireader_set
call :inireader_findsection "%~1"
if !retVal! equ 0 (
  call :arrappend "inireader_!inireader_current_instance!_section" "%~1"
  call :arrinit "inireader_!inireader_current_instance!_section_%~1_key"
  call :arrappend "inireader_!inireader_current_instance!_section_%~1_key" "%~2"
) else (
  call :arrfind "inireader_!inireader_current_instance!_section_%~1_key" "%~2"
  if !retVal! equ 0 (
    call :arrappend "inireader_!inireader_current_instance!_section_%~1_key" "%~2"
  )
)
set inireader_!inireader_current_instance!_section_%~1_key_%~2=%~3
goto :eof

rem inireader_set_alt: %1: section %2: key %3: value var
:inireader_set_alt
call :inireader_findsection "%~1"
if !retVal! equ 0 (
  call :arrappend "inireader_!inireader_current_instance!_section" "%~1"
  call :arrinit "inireader_!inireader_current_instance!_section_%~1_key"
)
set inireader_!inireader_current_instance!_section_%~1_key_%~2=!%~3!
call :arrappend "inireader_!inireader_current_instance!_section_%~1_key" "%~2"
goto :eof

rem inireader_printsections: %1: start %2: count
:inireader_printsections
call :arrprint "inireader_!inireader_current_instance!_section" "%~1" "%~2"
goto :eof

rem inireader_printkeys: %1: section %2: start %3: count
:inireader_printkeys
call :arrprint "inireader_!inireader_current_instance!_section_%~1" "%~2" "%~3"
goto :eof

rem inireader_findsection: %1: section
:inireader_findsection
set retval=0
call :arrfind "inireader_!inireader_current_instance!_section" "%~1"
if !retVal! equ 0 goto :eof
call :arrfind "inireader_!inireader_current_instance!_rm_section" "%~1"
if !retVal! equ 1 (
  set retVal=0
  goto :eof
)
set retval=1
goto :eof

rem inireader_removesection: %1: section
:inireader_removesection
call :arrfind "inireader_!inireader_current_instance!_rm_section" "%~1"
if !retVal! equ 1 goto :eof
call :arrappend "inireader_!inireader_current_instance!_rm_section" "%~1"
goto :eof

rem inireader_write: %1: file path
:inireader_write
echo ;Generated by INIReader batch ver > "%~1"
rem call :arrlength "inireader_!inireader_current_instance!_section"
call :getvalue "_count_inireader_!inireader_current_instance!_section" "value0"
for /l %%a in (0,1,!value0!) do (
  call :getvalue "inireader_!inireader_current_instance!_section%%a" "thisSection"
  call :arrfind "inireader_!inireader_current_instance!_rm_section" "!thisSection!"
  if !retVal! equ 0 (
    rem call :arrlength "inireader_!inireader_current_instance!_section_!thisSection!_key"
    echo.>>"%~1"
    echo [!thisSection!]>>"%~1"
    call :getvalue "_count_inireader_!inireader_current_instance!_section_!thisSection!_key" "value1"
    for /l %%b in (0,1,!value1!) do (
      call :getvalue "inireader_!inireader_current_instance!_section_!thisSection!_key%%b" "value2"
      call :getvalue "inireader_!inireader_current_instance!_section_!thisSection!_key_!value2!" "value3"
      echo !value2!=!value3!>>"%~1"
    )
  )
)
goto :eof

rem inireader_eraseinstance: no argument
:inireader_eraseinstance
call :getvalue "_count_inireader_!inireader_current_instance!_section" "value0"
for /l %%a in (0,1,!value0!) do (
  call :getvalue "inireader_!inireader_current_instance!_section%%a" "thisSection"
  rem call :arrlength "inireader_!inireader_current_instance!_section_!thisSection!_key"
  call :getvalue "_count_inireader_!inireader_current_instance!_section_!thisSection!_key" "value1"
  for /l %%b in (0,1,!value1!) do (
    call :getvalue "inireader_!inireader_current_instance!_section_!thisSection!_key%%b" "value2"
    set inireader_!inireader_current_instance!_section_!thisSection!_key_!value2!=
  )
  set _count_inireader_!inireader_current_instance!_section_!thisSection!_key=
  set inireader_!inireader_current_instance!_section%%a=
)
set _count_inireader_!inireader_current_instance!_section=
call :getvalue "_count_inireader_!inireader_current_instance!_rm_section" "value0"
for /l %%a in (0,1,!value0!) do (
  set inireader_!inireader_current_instance!_rm_section%%a=
)
set _count_inireader_!inireader_current_instance!_rm_section=
set inireader_current_instance=
goto :eof

rem ///base functions///

rem instr: %1: target %2: source ret: %retval% 0:found other:not found
:instr
echo "%~2"|find "%~1">nul
set retval=!errorlevel!
goto :eof

rem getvalue: %1: var name %2: write target ret: %2
:getvalue
set key=%~1
set out=%~2
set !out!=!%key%!
goto :eof

rem split: %1: source %2: delimiter ret: %first%, %second%
:split2
set split2_target=
call :getvalue "%~1" "split2_target"
for /f "delims=%~2 tokens=1,*" %%x in ("!split2_target!") do (
  set first=%%x
  set second=%%y
)
goto :eof

rem arrinit: %1: name
:arrinit
set arrname=%~1
set _count_!arrname!=-1
goto :eof

rem arrappend: %1: arrname %2: value
:arrappend
set arrname=%~1
set arrcount=!_count_%arrname%!
set /a arrcount=!arrcount!+1
set !arrname!!arrcount!=%~2
set _count_!arrname!=!arrcount!
goto :eof

rem arrfind: %1: arrname %2: value
:arrfind
set retVal=0
rem call :arrlength "%~1"
if !_count_%~1! equ -1 goto :eof
for /l %%a in (0,1,!_count_%~1!) do (
  if "!%~1%%a!" == "%~2" (
    set retVal=1
    goto :eof
  )
)
goto :eof

rem arrprint: %1: arrname %2: start %3: count
:arrprint
set index=1
set /a end=%~2+%~3-1
for /l %%a in (%~2,1,!end!) do (
  if defined %~1%%a (
    echo   !index!: [%%a] !%~1%%a!
    echo.
  ) else (
    echo   --END--
    echo.
    set /a retVal=!index!-1
    goto :eof
  )
  set /a index=!index!+1
)
set /a retVal=!index!-1
echo --END--
echo.
goto :eof
